syntax = "proto3";

///////////////////////////////////////////////////////////////////////////////
// Services provided by Genus
///////////////////////////////////////////////////////////////////////////////

package co.topl.proto.genus;

import 'models/address.proto';
import 'models/block.proto';
import 'models/common.proto';
import 'genus/genus_models.proto';

// Operations related to blocks
service GenusFullBlockService {
  // Retrieve a block with the specified `id` from the configured Genus service. This returns its result when there is a
  // block present in the genus service with the specified id and the confidence factor of the block is greater than or
  // equal to the value of the `confidenceFactor` parameter.
  rpc getBlockById(GetBlockByIdRequest) returns (models.FullBlock);

  // Retrieve the block at the specified height from the configured Genus service, where the height of the genesis block
  // is 1. This returns a result when there is a block present in the genus service at the specified height and the
  // confidence factor of the block is greater than or equal to the value of the `confidenceFactor` parameter.
  rpc getBlockByHeight(GetBlockByHeightRequest) returns (models.FullBlock);

  // Retrieve the block at the specified depth from the configured Genus service. This returns its result immediately.
  // The block at depth 1 is the highest block with a confidence factor that is greater than or
  // equal to the value of the `confidenceFactor` parameter.
  //
  // Since blocks keep getting added, we expect that multiple calls to this with the same argument will return different blocks.
  rpc getBlockByDepth(GetBlockByDepthRequest) returns (models.FullBlock);
}

// Operations related to GenusBlock contents
service TransactionService {
  // Retrieve a transaction with the specified `id` from the configured Genus service. This returns its result when there is
  // a transaction present in the genus service with the specified id and the confidence factor of the block that contains
  // the transaction is greater than or equal to the value of the `confidenceFactor` parameter.
  rpc getTransactionById(GetTransactionByIdRequest) returns (TransactionReceipt);

  // Get a stream of transactions that have an output associated with one of the specified addresses that have at least
  // the specified confidence factor.
  rpc getTransactionByAddressStream(QueryByAddressRequest) returns(stream TransactionReceipt);

  // In the future there will be a way to find transactions using a bloom filter.
  //rpc getTransactionByBloomFilter();

  // Get the TxOs currently associated with one of the specified addresses that have at least the specified confidence factor.
  rpc getTxosByAddress(QueryByAddressRequest) returns(TxoQueryResponse);

  // Get a stream of TxOs associated with one of the specified addresses that have at least the specified confidence factor.
  rpc getTxosByAddressStream(QueryByAddressRequest) returns(stream TxoQueryResponse);

  rpc getTxosByAssetLabel(QueryByAssetLabelRequest) returns(stream Txo);

  /////////////////////////////////////////////////////////////////////////////
  //
  // The following RPCs are for managing database indexes on the data fields of
  // transactions.
  //
  // They also allow the indexes to be based on field values that are embedded
  // in the data. Two types of field organization are supported. One is data
  // that is a JSON object. The other is data that is character separated
  // fields.
  //
  /////////////////////////////////////////////////////////////////////////////

  // Create a transaction index using on-chain data.
  rpc createOnChainTransactionIndex(CreateOnChainTransactionIndexRequest) returns (CreateOnChainTransactionIndexResponse);

  // Get information about existing transaction indexes
  rpc getExistingTransactionIndexes(GetExistingTransactionIndexesRequest) returns (IndexDefs);

  // Drop an index
  rpc dropIndex(DropIndexRequest) returns (DropIndexResponse);

  // get transactions that are in a named index and match the given value.
  rpc getIndexedTransactions(GetIndexedTransactionsRequest) returns(stream TransactionReceipt);
}

message GetBlockByIdRequest {
  models.BlockId blockId = 1;
  optional ConfidenceFactor confidenceFactor = 2;
}

message GetBlockByHeightRequest {
  ChainDistance height = 1;
  optional ConfidenceFactor confidenceFactor = 2;
}

message GetBlockByDepthRequest {
  ChainDistance depth = 1;
  optional ConfidenceFactor confidenceFactor = 2;
}

// Used to request a transaction by specifying its ID.
message GetTransactionByIdRequest {
  models.TransactionId transactionId = 1;
  // The default value for confidenceFactor is 0.9999999 (7 nines)
  optional ConfidenceFactor confidenceFactor = 2;
}

// Response from CreateOnChainTransactionIndex request
message CreateOnChainTransactionIndexResponse {
  // True if index was created.
  bool ok = 1;
}

// Used to request TxOs by their associated address
message QueryByAddressRequest {
  // All the addresses of interest
  repeated models.SpendingAddress addresses = 1;
  // The default value for confidenceFactor is 0.9999999 (7 nines)
  optional ConfidenceFactor confidenceFactor = 2;
}

// User to request TxOs by their asset type
message QueryByAssetLabelRequest {
  AssetLabel assetLabel = 1;
  // The default value for confidenceFactor is 0.9999999 (7 nines)
  optional ConfidenceFactor confidenceFactor = 2;
}

message TxoQueryResponse {
  // Map Base58 encoded addresses to TxOs.
  map<string, Txo> addressesToTxos = 1;

  message Txos {
    repeated genus.Txo txo = 1;
  }
}

// A request to create an index of transactions based on their on-chain data
message CreateOnChainTransactionIndexRequest {
  IndexSpec indexSpec = 1;
  // If populate is true, then scan the existing transaction in the database to populate the index.
  bool populate = 2;
}

// Definitions of existing database indexes.
message IndexDefs {
  repeated IndexDef indexDef = 1;
}

message IndexDef {
  oneof xdev {
    CreateOnChainTransactionIndexRequest onChain = 1;
  }
}

// The message that is sent when requesting information about the existing Genus indexes
message GetExistingTransactionIndexesRequest {

}

// Specify the name of an index to be dropped
message DropIndexRequest {
  string indexName = 1;
}

// Return true if the requested index was dropped or false if it was not (Most likely because it did not exist).
message DropIndexResponse {
  bool dropped = 1;
}

// Request the use of a named index to find transactions containing data that matches specified values.
message GetIndexedTransactionsRequest {
  // The name of the index to search
  string indexName = 1;

  // The index value(s) to search for.
  repeated IndexMatchValue value = 2;

  // The maximum number of transactions to be returned
  optional uint32 maxResults = 3;

  // A number of transactions to be skipped. This is useful for paging results.
  optional uint64 skipResults = 4;
}

// A value that may match a field in an index.
message IndexMatchValue {
  oneof value {
    string stringValue = 1;
    int64 intValue = 2;
    uint64 uintValue = 3;
  }
  optional string fieldName = 4;
}

//service SubscriptionService {
//  rpc getAvailableMessageQueues(AvailableMessageQueueRequest) returns (AvailableMessageQueueResponse);
//}
