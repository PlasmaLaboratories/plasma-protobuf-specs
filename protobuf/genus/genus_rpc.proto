syntax = "proto3";

///////////////////////////////////////////////////////////////////////////////
// Services provided by Genus
///////////////////////////////////////////////////////////////////////////////

package co.topl.proto.genus;

import 'models/address.proto';
import 'models/block.proto';
import 'models/box.proto';
import 'models/common.proto';
import 'models/transaction.proto';
import 'genus/genus_models.proto';

// Operations related to blocks
service GenusBlockService {
  // Get a GenusBlock by its hash
  rpc getBlockById(models.BlockId) returns (models.FullBlock);

  // get a GenusBlock by its height
  rpc getBlockByHeight(ChainDistance) returns (models.FullBlock);

  // get a GenusBlock by its depth
  // Since blocks keep getting added, we expect that multiple calls to this with the same argument will return different blocks.
  rpc getBlockByDepth(ChainDistance) returns (models.FullBlock);
}

// Operations related to GenusBlock contents
service TransactionService {
  // Get a transaction by its ID
  // This returns the transaction when it is in the Genus database AND its confidence factor is at least the specified value.
  rpc getTransactionById(GetTransactionByIdRequest) returns (models.Transaction);

  // Get the boxes currently associated with one of the specified addresses that have at least the specified confidence factor.
  rpc getBoxesByAddress(QueryByAddressRequest) returns(BoxQueryResponse);

  // Get a stream of boxes associated with one of the specified addresses that have at least the specified confidence factor.
  rpc getBoxesByAddressStream(QueryByAddressRequest) returns(stream BoxQueryResponse);

  rpc getBoxesByAssetLabel(QueryByAssetLabelRequest) returns(BoxQueryResponse);

  /////////////////////////////////////////////////////////////////////////////
  //
  // The following RPCs are for managing database indexes on the data fields of
  // transactions.They allow for indexing on-chain data or off chain data.
  //
  // They also allow the indexes to be based on field values that are embedded
  // in the data. Two types of field organization are supported. One is data
  // that is a JSON object. The other is data that is character separated
  // fields.
  //
  /////////////////////////////////////////////////////////////////////////////

  // Create a transaction index using on-chain data.
  rpc createOnChainTransactionIndex(CreateOnChainTransactionIndexRequest) returns (RecordCount);

  // Create a transaction index using off-chain data.
  rpc createOffChainTransactionIndex(CreateOffChainTransactionIndexRequest) returns (RecordCount);

  // Get information about existing transaction indexes
  rpc getExistingTransactionIndexes(GetExistingTransactionIndexesRequest) returns (stream TransactionIndexCreationRequest);

  // Drop an index
  rpc dropIndex(DropIndexRequest) returns (DropIndexResponse);

  // get transactions that are in a named index and match the given value.
  rpc getIndexedTransactions(GetIndexedTransactionsRequest) returns(stream Transaction);
}

// Used to request a transaction by specifying its ID.
message GetTransactionByIdRequest {
  models.TransactionId transactionId = 1;
  // The default value for confidenceFactor is 0.9999999 (7 nines)
  optional ConfidenceFactor confidenceFactor = 2;
}

// Used to request boxes by their associated address
message QueryByAddressRequest {
  // All the addresses of interest
  repeated models.SpendingAddress addresses = 1;
  // The default value for confidenceFactor is 0.9999999 (7 nines)
  optional ConfidenceFactor confidenceFactor = 2;
}

// User to request Box by their asset type
message QueryByAssetLabelRequest {
  AssetLabel assetLabel = 1;
  // The default value for confidenceFactor is 0.9999999 (7 nines)
  optional ConfidenceFactor confidenceFactor = 2;
}

message BoxQueryResponse {
  // Map addresses that are Base58 encoded to boxes.
  map<string, BoxStatuses> addressesToBoxes = 1;

  message BoxStatuses {
    repeated genus.BoxStatus boxStatus = 1;
  }
}

service SubscriptionService {
  rpc getAvailableMessageQueues(AvailableMessageQueueRequest) returns (AvalableMessageQueueResponse);
}
