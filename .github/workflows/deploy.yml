name: deploy
on:
  push:
    branches: ["*"]
    tags: ["*"]

jobs:
  build:
    name: Protoc Test Build and Compile
    uses: ./.github/workflows/_protoc_build.yml
  publish-scala:
    name: Publish Scala
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Deploy Scala (release only)
        run: sbt ci-release
        working-directory: ./build/scala
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}

  publish-dart:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    name: Publish Dart
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for authentication using OIDC
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: dart-lang/setup-dart@v1
      - uses: actions/download-artifact@v4
        with:
          name: dart-compiled-lib
          path: build/dart/lib

      - name: Set version from tag
        run: |
          # Extract version from git tag
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          # Update pubspec.yaml version
          sed -i "s/^version: .*/version: $VERSION/" pubspec.yaml
        working-directory: ./build/dart
  
      - run: dart pub get
        working-directory: ./build/dart
      - name: Deploy Dart (release only)
        run: dart pub publish --force
        working-directory: ./build/dart

  publish-ts:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    name: Publish TypeScript
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - uses: actions/download-artifact@v4
        with:
          name: ts-compiled-lib
          path: build/ts

      - name: Install dependencies
        run: npm ci

      - name: Set version from tag
        run: |
          # Extract version from git tag (remove 'v' prefix if present)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          # Update package.json version
          npm version $VERSION --no-git-tag-version
        working-directory: ./build/ts

      - name: Deploy TypeScript (release only)
        run: npm publish --provenance --access public
        working-directory: ./build/ts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
