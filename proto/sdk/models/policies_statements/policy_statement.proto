syntax = "proto3";

package org.plasmalabs.sdk.models;

import 'validate/validate.proto';

import 'sdk/models/address.proto';
import 'sdk/models/box/asset.proto';
import 'sdk/models/identifier.proto';

import 'google/protobuf/wrappers.proto';
import "google/protobuf/struct.proto";

import 'quivr/models/shared.proto';

message GroupPolicy {
  // Identifies the group policy for humans (do not confuse with the actual group identifier)
  string label = 1;
  // The address of a UTXO. The UTXO contains the LVLs that are paid for minting the group constructor token.
  TransactionOutputAddress registrationUtxo = 2 [(validate.rules).message.required = true];
  // An optional series identifier. When this series identifier is defined, this groups that implement this policy can only be used to mint assets with the aforementioned series identifier
  SeriesId fixedSeries = 3;
}

message SeriesPolicy {
  // The human readable name of this series. (do not confuse with the actual series identifier)
  string label = 1;
  // This is an optional field. When provided it fixes the quantity of tokens that will be minted when this series is consumed,
  // and the series constructor is burned by the minting transaction.
  // When not provided, the series constructor is not burned, thus making the token supply unlimited.
  google.protobuf.UInt32Value tokenSupply = 2;
  // The address of a UTXO. The UTXO contains the LVLs that are paid for minting the series constructor token.
  TransactionOutputAddress registrationUtxo = 3 [(validate.rules).message.required = true];
  // Describes the behavior of the quantity field of the assets minted using the series constructor derived from this policy.
  sdk.models.box.QuantityDescriptorType quantityDescriptor = 4;
  //Describes the fungibility of the assets minted using the series constructor token derived from this policy.
  sdk.models.box.FungibilityType fungibility = 5;
  // Describes the schema of the data stored in the metadata field of the Asset Minting Statement.
  google.protobuf.Struct ephemeralMetadataScheme = 6;
  // Describes the schema of the data stored in the Asset Token.
  google.protobuf.Struct permanentMetadataScheme = 7;
}

message AssetMintingStatement {
  // The address of the UTXO that contains the group constructor token that we are using to mint the asset token.
  TransactionOutputAddress groupTokenUtxo = 1 [(validate.rules).message.required = true];
  // The address of the UTXO that contains the seriesconstructor token that we are using to mint the asset token.
  TransactionOutputAddress seriesTokenUtxo = 2 [(validate.rules).message.required = true];
  // The number of assets that we are minting using the group and series constructor token references by the two other attributes.
  quivr.models.Int128 quantity = 3 [(validate.rules).message.required = true];
  // This is the permanent metadata of an asset.
  // It follows the schema defined in the permanent metadata schema of the series policy corresponding to the token being minted.
  // The conformance of this field to the schema is not checked by the node.
  google.protobuf.Struct permanentMetadata = 4;
}

message AssetMergingStatement {
  // The non-empty list of UTXOs that we are using to compute the Merkle root for the alloy.
  repeated TransactionOutputAddress inputUtxos = 1;
  // The index in the output sequence of the transaction where the merged tokens are stored.
  uint32 outputIdx = 2;
}

message AssetSplittingStatement {
  // The non-empty list of indexes where the split asset is being put.
  repeated google.protobuf.UInt32Value outputIndexes = 1;
  // The UTXO that is being split.
  TransactionOutputAddress inputUtxo = 2 [(validate.rules).message.required = true];
}